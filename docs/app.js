(self.webpackJsonp=self.webpackJsonp||[]).push([[1],[function(e,r,t){e.exports=t(1)},function(e,r,t){"use strict";t.r(r);var n=t(2);(window.navigator.serviceWorker?n.ApplicationService.create("sw.js"):Promise.reject()).then(()=>{const e=document.getElementById("app"),r=document.createElement("h1");r.textContent="Ok!",e.appendChild(r)}).catch(e=>{const r=document.getElementById("app"),t=document.createElement("h1");t.textContent="Something went wrong!";const n=document.createElement("p");n.textContent=e&&e.message||e.toString()||"Unknown Reason",r.appendChild(t),r.appendChild(n)})},function(e,r,t){"use strict";t.r(r),t.d(r,"ApplicationService",(function(){return o}));var n=t(3),s=t(4);const i=e=>Promise.reject("Unknown method: "+e);class o{constructor(e){this.client=e}static async create(e){s.LOG;const r=await n.ServiceWorkerClient.create(e,i);return s.LOG,new o(r)}get id(){return this.client.id}updateCache(){return this.client.$$updateCache$$()}}},function(e,r,t){"use strict";t.r(r),t.d(r,"ServiceWorkerClient",(function(){return i}));var n=t(4);class s{constructor(e){this.messageHandler=e,this.lastSendRequestId=0,this.pendingReplies=new Map,window.navigator.serviceWorker.addEventListener("message",this.handlePossibleResult.bind(this))}handlePossibleResult(e){let r=void 0;try{r=JSON.parse(e.data)}catch(e){return void n.LOG}if(function(e){return!!e&&void 0!==e.rpcId}(r)){const e=r.rpcId;return void this.messageHandler.handleMessage(r.method,r.args).then(r=>{this.messageHandler.sendMessage(JSON.stringify({rpcId:e,result:r,error:void 0}))},r=>{this.messageHandler.sendMessage(JSON.stringify({rpcId:e,result:void 0,error:Object(n.transformErrorForSerialization)(r)}))})}if(!r||!r.requestId||"number"!=typeof r.requestId)return void n.LOG;const t=this.pendingReplies.get(r.requestId);if(t){if(this.pendingReplies.delete(r.requestId),n.LOG,r.error){let e=r.error;return e.$isError&&((e=new Error).name=r.error.name,e.message=r.error.message,e.stack=r.error.stack),void(t.error&&t.error(e))}t.resolve&&t.resolve(r.result)}}doRPCCall(e,r){const t={},n=new Promise((e,r)=>{t.resolve=e,t.error=r});return this.pendingReplies.set(++this.lastSendRequestId,t),this.messageHandler.sendMessage(JSON.stringify({requestId:this.lastSendRequestId,method:e,args:r})),n}}class i{constructor(e,r){if(this.serviceWorker=e,!this.serviceWorker)throw new Error("ServiceWorkerClient: serviceWorker is null or undefined.");this.protocol=new s({sendMessage:e=>this.serviceWorker.postMessage(e),handleMessage:(e,t)=>r(e,t)})}get id(){return this._id}static async create(e,r){n.LOG;const t=window.navigator.serviceWorker;let s=await t.getRegistration();if(s){n.LOG;const r=new URL(e,s.scope);s.active&&s.active.scriptURL!==r.href?(n.LOG,await s.unregister(),[s]=await Promise.all([t.ready,t.register(e,{scope:"/a-new-life/"})]),n.LOG):(n.LOG,await s.update().catch(()=>{n.LOG}),n.LOG)}else n.LOG,[s]=await Promise.all([t.ready,t.register(e,{scope:"/a-new-life/"})]),n.LOG;if(!s.active)throw new Error("No active service worker found.");const o=new i(s.active,r),a=await o.protocol.doRPCCall(n.INITIALIZE,[]).catch(e=>{throw e});if(!a)throw new Error("Service worker initialization failed.");o._id=a.id;const c={};return Object.defineProperty(c,"id",{configurable:!1,enumerable:!0,get:()=>o.id,set:()=>{}}),a.methods.forEach(e=>{c[e]=function(){return o.protocol.doRPCCall(e,[...arguments])}}),c}}},function(e,r,t){"use strict";t.r(r),t.d(r,"INITIALIZE",(function(){return n})),t.d(r,"LOG",(function(){return s})),t.d(r,"transformErrorForSerialization",(function(){return i}));const n="$initialize",s=!1;function i(e){if(e instanceof Error){let{name:r,message:t}=e;return{$isError:!0,name:r,message:t,stack:e.stacktrace||e.stack}}return e}}],[[0,0]]]);